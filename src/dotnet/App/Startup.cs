/*
 * SOCOMAP
 *
 * This is the Api for the new SOCOMAP Protocol
 *
 * OpenAPI spec version: 0.0.1
 * Contact: development@infotech.de
 * Generated by: https://openapi-generator.tech
 */

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Org.OpenAPITools.Filters;
using Socomap.Adapter;
using SocomapLib;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.IO;
using System.Linq;
using System.Reflection;

namespace Socomap
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {


            var dbhost = Environment.GetEnvironmentVariable("DBHOST");
            if (string.IsNullOrEmpty(dbhost))
                dbhost = "localhost";
            var dbname = Environment.GetEnvironmentVariable("DBNAME");
            if (string.IsNullOrEmpty(dbname))
                dbname = "socomap";
            var dbuser = Environment.GetEnvironmentVariable("DBUSER");
            if (string.IsNullOrEmpty(dbuser))
                dbuser = "socomap";
            var dbpass = Environment.GetEnvironmentVariable("DBPASS");
            if (string.IsNullOrEmpty(dbpass))
                dbpass = "test";
            var connection = $"Host={dbhost}; Database={dbname}; Username={dbuser}; Password={dbpass};";
            services.AddDbContext<TransmissionContext>(options => options.UseNpgsql(connection, b => b.MigrationsAssembly("Socomap")));

            {
                var optionsBuilder = NpgsqlDbContextOptionsExtensions.UseNpgsql(new DbContextOptionsBuilder<TransmissionContext>(), connection, b => b.MigrationsAssembly("Socomap"));
                var transmissionContext = new TransmissionContext(optionsBuilder.Options);
                var pendingMigrations = transmissionContext.Database.GetPendingMigrations();
                if (pendingMigrations != null && pendingMigrations.Any())
                {
                    transmissionContext.Database.Migrate();
                }
            }

            services.AddTransient<IInboxAdapter, InboxAdapter>((IServiceProvider serviceProvider) =>
                {
                    var optionsBuilder = NpgsqlDbContextOptionsExtensions.UseNpgsql(new DbContextOptionsBuilder<TransmissionContext>(), connection, b => b.MigrationsAssembly("Socomap"));
                    var transmissionContext = new TransmissionContext(optionsBuilder.Options);
                    var inboxes = new Inboxes(transmissionContext);
                    var transmissions = new Transmissions(transmissionContext, inboxes);
                    return new InboxAdapter(inboxes, transmissions);
                });
            services.AddTransient<ITransferAdapter, TransferAdapter>((IServiceProvider serviceProvider) =>
                {
                    var optionsBuilder = NpgsqlDbContextOptionsExtensions.UseNpgsql(new DbContextOptionsBuilder<TransmissionContext>(), connection, b => b.MigrationsAssembly("Socomap"));
                    var transmissionContext = new TransmissionContext(optionsBuilder.Options);
                    var inboxes = new Inboxes(transmissionContext);
                    var transmissions = new Transmissions(transmissionContext, inboxes);
                    return new TransferAdapter(inboxes, transmissions);
                }
            );

            // Setup the database.

            // Add framework services.
            services
                .AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1)
                .AddJsonOptions(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        CamelCaseText = true
                    });
                });

            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("0.0.1", new Info
                    {
                        Version = "0.0.1",
                        Title = "SOCOMAP",
                        Description = "SOCOMAP (ASP.NET Core 2.2)",
                        Contact = new Contact()
                        {
                            Name = "Infotech GmbH",
                            Url = "http://www.infotech.de",
                            Email = "development@infotech.de"
                        },
                        TermsOfService = "http://www.infotech.de"
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.DescribeAllEnumsAsStrings();
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml");
                    // Sets the basePath property in the Swagger document generated
                    c.DocumentFilter<BasePathFilter>("/v1");

                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseHttpsRedirection();
            app
                .UseMvc()
                .UseDefaultFiles()
                .UseStaticFiles()
                .UseSwagger(c =>
                {
                    c.RouteTemplate = "swagger/{documentName}/openapi.json";
                })
                .UseSwaggerUI(c =>
                {
                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)
                    c.SwaggerEndpoint("/swagger/0.0.1/openapi.json", "SOCOMAP");

                    //TODO: Or alternatively use the original Swagger contract that's included in the static files
                    // c.SwaggerEndpoint("/openapi-original.json", "WSR EDI Original");
                });

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }
        }
    }
}
